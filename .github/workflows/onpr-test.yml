name: Run security scans and plan

on:
    pull_request:
        types: [opened, synchronize]
        branches: [main]

permissions:
  pull-requests: write

env:
# verbosity setting for Terraform logs
 TF_LOG: INFO
 # Credentials for deployment to AWS
 AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
 AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
    run-scans:
        runs-on: ubuntu-latest

        steps:
        - name: Checkout repository
          uses: actions/checkout@v3
        
        - name: Install terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: "1.12.2"

        - name: Install jq
          run: sudo apt-get install -y jq

        - name: Install GitHub CLI
          run: |
            sudo apt-get update
            sudo apt-get install -y gh
        
        - name: Terraform fmt
          id: fmt
          run: terraform fmt
          continue-on-error: true
        
        - name: Terraform init
          id: init
          run: terraform init
        
        # - name: Run terrascan
        #   id: terrascan
        #   uses: tenable/terrascan-action@main
        #   with:
        #     iac_type: 'terraform'
        #     iac_version: 'v13'
        #     policy_type: 'aws'
        #     only_warn: false
        #     sarif_upload: true

        - name: Install Terrascan
          run: |
            curl -L https://github.com/tenable/terrascan/releases/latest/download/terrascan_linux_amd64 -o terrascan
            chmod +x terrascan
            sudo mv terrascan /usr/local/bin/

        - name: Run Terrascan scan
          id: terrascan-scan
          run: |
            terrascan scan -i terraform -t aws -o json > terrascan-result.json

            HIGH=$(jq '[.results.violations[] | select(.severity=="HIGH")] | length' terrascan-result.json)
            MEDIUM=$(jq '[.results.violations[] | select(.severity=="MEDIUM")] | length' terrascan-result.json)
            LOW=$(jq '[.results.violations[] | select(.severity=="LOW")] | length' terrascan-result.json)

            echo "HIGH=$HIGH" >> $GITHUB_OUTPUT
            echo "MEDIUM=$MEDIUM" >> $GITHUB_OUTPUT
            echo "LOW=$LOW" >> $GITHUB_OUTPUT

        - name: Fail if HIGH severity issues found
          if: steps.terrascan-scan.outputs.HIGH != '0'
          run: |
            echo "❌ Found ${{ steps.terrascan-scan.outputs.HIGH }} HIGH severity vulnerabilities. Failing the job."
            exit 1

        - name: Comment PR with Terrascan summary (if any MEDIUM or LOW)
          if: steps.terrascan-scan.outputs.HIGH == '0' && (steps.terrascan-scan.outputs.MEDIUM != '0' || steps.terrascan-scan.outputs.LOW != '0')
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          run: |
            PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
            echo "Posting Terrascan warning comment to PR #$PR_NUMBER"

            HIGH=${{ steps.terrascan-scan.outputs.HIGH }}
            MEDIUM=${{ steps.terrascan-scan.outputs.MEDIUM }}
            LOW=${{ steps.terrascan-scan.outputs.LOW }}

            COMMENT="⚠️ Terrascan found issues:\n
            - High Severity: $HIGH\n
            - Medium Severity: $MEDIUM\n
            - Low Severity: $LOW\n
            Please review the findings."

            gh pr comment $PR_NUMBER --body "$COMMENT"
            fi

        - name: Terraform plan
          id: plan
          run: terraform plan > plan.txt

        - name: Post Plan Output to PR
          run: |
            gh pr comment ${{ github.event.pull_request.number }} --body-file plan.txt
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}